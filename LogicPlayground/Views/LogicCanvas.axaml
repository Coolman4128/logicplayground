<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="using:LogicPlayground.ViewModels"
             xmlns:views="using:LogicPlayground.Views"
             xmlns:behav="clr-namespace:LogicPlayground.Behaviors"
             xmlns:logic="clr-namespace:LogicPlayground.ViewModels.LogicBlocks"
             xmlns:models="clr-namespace:LogicPlayground.Models"
             x:Class="LogicPlayground.Views.LogicCanvas"
             x:DataType="vm:LogicCanvasViewModel"
             >
     <UserControl.DataTemplates>

     <!-- DEFINE DATA TEMPLATES FOR BLOCKS HERE-->
     <DataTemplate x:DataType="logic:Functions.LogicGateFunctionViewModel">
            <views:LogicGateFunction behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Inputs.ConstDigitalInputViewModel">
                <views:ConstDigitalInput behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Inputs.ConstAnalogInputViewModel">
                <views:ConstAnalogInput behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Outputs.LogAnalogOutputViewModel">
                <views:LogAnalogOutput behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Outputs.LogDigitalOutputViewModel">
                <views:LogDigitalOutput behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Functions.CompareFunctionViewModel">
            <views:CompareFunction behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Functions.MathFunctionViewModel">
            <views:MathFunction behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>
        
        <DataTemplate x:DataType="logic:Functions.DigitalToAnalogViewModel">
            <views:DigitalToAnalog behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Outputs.LightOutputViewModel">
            <views:LightOutput behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Functions.DecimalToBinaryViewModel">
            <views:DecimalToBinary behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Functions.BinaryToDecimalViewModel">
            <views:BinaryToDecimal behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Outputs.VariableAnalogOutputViewModel">
            <views:VariableAnalogOutput behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        <DataTemplate x:DataType="logic:Inputs.VariableAnalogInputViewModel">
            <views:VariableAnalogInput behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>

        </DataTemplate>

        <DataTemplate x:DataType="logic:Outputs.VariableDigitalOutputViewModel">
            <views:VariableDigitalOutput behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>

        </DataTemplate>

        <DataTemplate x:DataType="logic:Inputs.VariableDigitalInputViewModel">
            <views:VariableDigitalInput behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>

        </DataTemplate>
        
        <DataTemplate x:DataType="logic:LogicBlockViewModel">
            <views:LogicBlock behav:DragBehavior.EnableDrag="True" behav:DoubleClickBehavior.EnableDoubleClick="True"/>
        </DataTemplate>

        

        
    </UserControl.DataTemplates>

    <!-- view-model namespace: xmlns:vm="clr-namespace:YourApp.ViewModels" -->
<Grid behav:CanvasMovementBehavior.EnablePan="True" 
      behav:ConnectionLineSelectionBehavior.EnableSelection="True">
    <!-- Logic Blocks Layer (Background) -->
    <ItemsControl x:Name="BlockItemsControl" ItemsSource="{Binding Blocks}">
        <!-- 1. Use a Canvas to lay items out freely -->
        <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
                <Canvas Background="#1d1d1dff" Width="{Binding CANVASSIZE_WIDTH}" Height="{Binding CANVASSIZE_HEIGHT}">
                    <Canvas.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="{Binding ZoomLevel, Mode=OneWay}" ScaleY="{Binding ZoomLevel, Mode=OneWay}" />
                            <TranslateTransform X="{Binding CameraOffsetX, Mode=OneWay}" Y="{Binding CameraOffsetY, Mode=OneWay}" />
                        </TransformGroup>
                    </Canvas.RenderTransform>
                </Canvas>
            </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>

        <!-- 2. Style the item *container* so Canvas can read the coords -->
        <ItemsControl.Styles>
            <Style Selector="#BlockItemsControl > ContentPresenter" x:DataType="logic:LogicBlockViewModel">
                <!-- bind to your VM properties -->
                <Setter Property="Canvas.Left" Value="{Binding BlockPositionX}"/>
                <Setter Property="Canvas.Top"  Value="{Binding BlockPositionY}"/>
            </Style>
        </ItemsControl.Styles>
    </ItemsControl>

    <!-- Connection Lines Layer (Foreground) -->
    <ItemsControl ItemsSource="{Binding ConnectionLines}" 
                  IsHitTestVisible="False">
        <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
                <Canvas Background="Transparent" Width="{Binding CANVASSIZE_WIDTH}" Height="{Binding CANVASSIZE_HEIGHT}">
                    <Canvas.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="{Binding ZoomLevel, Mode=OneWay}" ScaleY="{Binding ZoomLevel, Mode=OneWay}" />
                            <TranslateTransform X="{Binding CameraOffsetX, Mode=OneWay}" Y="{Binding CameraOffsetY, Mode=OneWay}" />
                        </TransformGroup>
                    </Canvas.RenderTransform>
                </Canvas>
            </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>
        <ItemsControl.ItemTemplate>
            <DataTemplate x:DataType="models:ConnectionLine">
                <Polyline Points="{Binding Points}" 
                          Stroke="{Binding StrokeColor}" 
                          StrokeThickness="{Binding StrokeThickness}" />
            </DataTemplate>
        </ItemsControl.ItemTemplate>
    </ItemsControl>

    <!-- Temporary Connection Line (for dragging feedback) -->
    <Canvas IsHitTestVisible="False" IsVisible="{Binding TempConnectionLine.IsVisible}">
        <Canvas.RenderTransform>
            <TransformGroup>
                <ScaleTransform ScaleX="{Binding ZoomLevel, Mode=OneWay}" ScaleY="{Binding ZoomLevel, Mode=OneWay}" />
                <TranslateTransform X="{Binding CameraOffsetX, Mode=OneWay}" Y="{Binding CameraOffsetY, Mode=OneWay}" />
            </TransformGroup>
        </Canvas.RenderTransform>
        <Polyline Points="{Binding TempConnectionLine.Points}" 
                  Stroke="{Binding TempConnectionLine.StrokeColor}" 
                  StrokeThickness="{Binding TempConnectionLine.StrokeThickness}" 
                  StrokeDashArray="5,5" />
    </Canvas>
</Grid>


</UserControl>